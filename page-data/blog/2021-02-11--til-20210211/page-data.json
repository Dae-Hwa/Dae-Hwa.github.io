{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/2021-02-11--til-20210211/","result":{"data":{"site":{"siteMetadata":{"disqus":"gatsby-typescript"}},"post":{"html":"<ul>\n<li><a href=\"https://learngitbranching.js.org/?locale=ko\">Git 브랜치 배우기</a>으로 기본적인 동작을 학습했다. 어제 들었던 branch -f 에 관한 것도 문제에 있어 신기했다. 너무 잘 만든 것 같다. 머리가 좀 식으면 다음 단계들도 계속 도전해봐야겠다.</li>\n<li>나도 <a href=\"https://github.com/codesquad-members-2021/java-chess/pull/51\">[yeon] 미션2: 체스판 생성 #51</a> 와 비슷한 상황인 것 같아 생각을 해봤다.\npr1과 pr2가 있고 origin에서 upsteram으로 풀리퀘스트 요청을 하는 상황이다. pr1 이후 pr2 를 요청했고, pr1에 변경사항이 생겼을 경우, pr1은 수정하여 origin에 push할건데, 이 것을 pr2에서 사용하는 브랜치로 rebase해주면 이후 pr1이 upstream에 merge 되더라도 충돌이 일어나지 않을 것이다! 라고 생각했는데, 맞는지 모르겠다. 테스트도 할겸 풀리퀘스트를 추가로 날려볼까 생각중이다.</li>\n<li>\n<p>큐가 문제를 내줬다. 제인의 <a href=\"https://github.com/codesquad-members-2021/java-chess/pull/31#discussion_r573965768\">리뷰</a>에 달려있던 내용인데, 아래의 실행결과는 <strong>YXYZ</strong> 다. 부끄럽지만 처음에는 super 생략을 생각하지 못했고, 이후에는 실행 순서가 정확히 이해가 되지 않았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">X</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Y</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Y</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">X</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Y</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Y</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Y\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Z</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">X</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Y</span> y <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Y</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">Z</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Z\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">new</span> <span class=\"token class-name\">Z</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>해설을 읽어보니 static, super(), 필드 초기화, 생성자 블럭 실행의 순서로 실행된다고 한다. 그럼에도 정확히 이해가 안돼서 컴파일 시 바이트 코드가 그렇게 바뀐다는 글에서 힌트를 얻어 디컴파일을 해봤다.</p>\n<p>요약하자면, 컴파일하면</p>\n<ol>\n<li>스태틱 필드와 스태틱 블록의 소스들이 스태틱 블록에 합쳐진다.</li>\n<li>필드와 인스턴스 블록이 생성자 블록에 합쳐진다.</li>\n</ol>\n<p>그런데, 생성자 블록에 합쳐질때, 생성자에 작성된 소스보다 상위에 합쳐진다. 즉, 생성자에 직접 작성한 코드는 나중에 실행된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">X</span> <span class=\"token punctuation\">{</span>\n<span class=\"token class-name\">Y</span> b<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">X</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Code</span><span class=\"token operator\">:</span>\n    <span class=\"token number\">0</span><span class=\"token operator\">:</span> aload_0\n    <span class=\"token number\">1</span><span class=\"token operator\">:</span> invokespecial #<span class=\"token number\">10</span>                 <span class=\"token comment\">// Method java/lang/Object.\"&lt;init>\":()V</span>\n    <span class=\"token number\">4</span><span class=\"token operator\">:</span> aload_0\n    <span class=\"token number\">5</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span>           #<span class=\"token number\">12</span>                 <span class=\"token comment\">// class Y</span>\n    <span class=\"token number\">8</span><span class=\"token operator\">:</span> dup\n    <span class=\"token number\">9</span><span class=\"token operator\">:</span> invokespecial #<span class=\"token number\">14</span>                 <span class=\"token comment\">// Method Y.\"&lt;init>\":()V</span>\n    <span class=\"token number\">12</span><span class=\"token operator\">:</span> putfield      #<span class=\"token number\">15</span>                 <span class=\"token comment\">// Field b:LY;</span>\n    <span class=\"token number\">15</span><span class=\"token operator\">:</span> getstatic     #<span class=\"token number\">17</span>                 <span class=\"token comment\">// Field java/lang/System.out:Ljava/io/PrintStream;</span>\n    <span class=\"token number\">18</span><span class=\"token operator\">:</span> ldc           #<span class=\"token number\">23</span>                 <span class=\"token comment\">// String X</span>\n    <span class=\"token number\">20</span><span class=\"token operator\">:</span> invokevirtual #<span class=\"token number\">25</span>                 <span class=\"token comment\">// Method java/io/PrintStream.print:(Ljava/lang/String;)V</span>\n    <span class=\"token number\">23</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Y</span> <span class=\"token punctuation\">{</span>\n<span class=\"token class-name\">Y</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Code</span><span class=\"token operator\">:</span>\n    <span class=\"token number\">0</span><span class=\"token operator\">:</span> aload_0\n    <span class=\"token number\">1</span><span class=\"token operator\">:</span> invokespecial #<span class=\"token number\">8</span>                  <span class=\"token comment\">// Method java/lang/Object.\"&lt;init>\":()V</span>\n    <span class=\"token number\">4</span><span class=\"token operator\">:</span> getstatic     #<span class=\"token number\">10</span>                 <span class=\"token comment\">// Field java/lang/System.out:Ljava/io/PrintStream;</span>\n    <span class=\"token number\">7</span><span class=\"token operator\">:</span> ldc           #<span class=\"token number\">16</span>                 <span class=\"token comment\">// String Y</span>\n    <span class=\"token number\">9</span><span class=\"token operator\">:</span> invokevirtual #<span class=\"token number\">18</span>                 <span class=\"token comment\">// Method java/io/PrintStream.print:(Ljava/lang/String;)V</span>\n    <span class=\"token number\">12</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Z</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">X</span> <span class=\"token punctuation\">{</span>\n<span class=\"token class-name\">Y</span> y<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Z</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Code</span><span class=\"token operator\">:</span>\n    <span class=\"token number\">0</span><span class=\"token operator\">:</span> aload_0\n    <span class=\"token number\">1</span><span class=\"token operator\">:</span> invokespecial #<span class=\"token number\">10</span>                 <span class=\"token comment\">// Method X.\"&lt;init>\":()V</span>\n    <span class=\"token number\">4</span><span class=\"token operator\">:</span> aload_0\n    <span class=\"token number\">5</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span>           #<span class=\"token number\">12</span>                 <span class=\"token comment\">// class Y</span>\n    <span class=\"token number\">8</span><span class=\"token operator\">:</span> dup\n    <span class=\"token number\">9</span><span class=\"token operator\">:</span> invokespecial #<span class=\"token number\">14</span>                 <span class=\"token comment\">// Method Y.\"&lt;init>\":()V</span>\n    <span class=\"token number\">12</span><span class=\"token operator\">:</span> putfield      #<span class=\"token number\">15</span>                 <span class=\"token comment\">// Field y:LY;</span>\n    <span class=\"token number\">15</span><span class=\"token operator\">:</span> getstatic     #<span class=\"token number\">17</span>                 <span class=\"token comment\">// Field java/lang/System.out:Ljava/io/PrintStream;</span>\n    <span class=\"token number\">18</span><span class=\"token operator\">:</span> ldc           #<span class=\"token number\">23</span>                 <span class=\"token comment\">// String Z</span>\n    <span class=\"token number\">20</span><span class=\"token operator\">:</span> invokevirtual #<span class=\"token number\">25</span>                 <span class=\"token comment\">// Method java/io/PrintStream.print:(Ljava/lang/String;)V</span>\n    <span class=\"token number\">23</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span></span>String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">Code</span><span class=\"token operator\">:</span>\n    <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span>           #<span class=\"token number\">1</span>                  <span class=\"token comment\">// class Z</span>\n    <span class=\"token number\">3</span><span class=\"token operator\">:</span> invokespecial #<span class=\"token number\">37</span>                 <span class=\"token comment\">// Method \"&lt;init>\":()V</span>\n    <span class=\"token number\">6</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>환경을 나눠서 하니 수월하게 환경설정을 완료했다. 폴더를 나눠서 설정을 넣었는데 만약 나중에 프로파일 설정도 필요하다면 빌드스크립트로 관리를 해야 할 것 같다. 하지만 지금은 테스트 서버를 따로 잡지 않을 예정이니, 프런트도 로컬에서 쉽게쉽게 실행시킬 수 있어야 한다. 따라서 프로파일은 최대한 지양할 예정이다.</li>\n</ul>","excerpt":"Git 브랜치 배우기으로 기본적인 동작을 학습했다. 어제 들었던 branch -f 에 관한 것도 문제에 있어 신기했다. 너무 잘 만든 것 같다. 머리가 좀 식으면 다음 단계들도 계속 도전해봐야겠다. 나도 [yeon] 미션2: 체스판 생성 #5…","timeToRead":2,"fields":{"slug":"/blog/2021-02-11--til-20210211/"},"frontmatter":{"tags":["til"],"author":{"id":"정대화","bio":"DaeHwa_Jeong@outlook.com"},"title":"TIL-20210211","updatedDate":"2021. 02. 11.","createdDate":"2021. 02. 11."}},"recents":{"edges":[{"node":{"fields":{"slug":"/blog/2021-02-27--til-20210227/"},"timeToRead":1,"frontmatter":{"tags":["til"],"title":"TIL-20210227","author":{"id":"정대화"}}}},{"node":{"fields":{"slug":"/blog/2021-02-27--til-20210226/"},"timeToRead":1,"frontmatter":{"tags":["til"],"title":"TIL-20210226","author":{"id":"정대화"}}}},{"node":{"fields":{"slug":"/blog/2021-02-26--til-20210225/"},"timeToRead":1,"frontmatter":{"tags":["til"],"title":"TIL-20210225","author":{"id":"정대화"}}}},{"node":{"fields":{"slug":"/blog/2021-02-25--til-20210224/"},"timeToRead":2,"frontmatter":{"tags":["til"],"title":"TIL-20210224","author":{"id":"정대화"}}}}]}},"pageContext":{"slug":"/blog/2021-02-11--til-20210211/","dateFormat":"YYYY. MM. DD."}},"staticQueryHashes":[]}