{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/2021-02-23--til-20210222/","result":{"data":{"site":{"siteMetadata":{"disqus":"gatsby-typescript"}},"post":{"html":"<ul>\n<li>배열이 0부터인 이유는 C에서 부터 내려온 전통이기 때문이다. 더 자세하게 얘기하면, C의 배열은 주소 연산을 하여 위치를 찾는 것의 syntatic sugar로 인덱스 접근(a[1]과 같은)을 제공하기 때문에 매우 원시적이고, 따라서 0부터 시작하지 않으면 메모리 낭비가 발생하게 된다.</li>\n<li>그룹 리뷰를 위해 간단한 룰을 정했다. 저녁에 물어보니 노을의 조도 비슷한 과정을 거친 것 같았다.</li>\n<li>미션5를 완성했다. 오늘은 flatmap과 groupby를 활용했다. 평소에는 잘 사용하기 힘든 메소드들인데, 잘 활용하니 훨씬 쉬워졌다. 물론 잘 활용한게 맞는건지는 아직 모르겠다😂 내일은 여유가 되면 어떤 식으로 동작하는지 살펴봐야겠다.</li>\n<li>프런트는 개발을 시작 한 것 같다. 일단 이번 주는 미션에 최대한 집중하고 남는 시간에 스웨거 세팅을 하도록 하자.</li>\n<li>노을이 물어봐줘서 간만에 깊은 복사를 다시 보게 되었다. Clonable은 setter가 없을 시 필드까지 깊은 복사를 하려면 너무 까다로워 진다. 규약이 제대로 되어있지 않고, 자율성에 맡기는 느낌이 강하기 때문이다. 또한 클론 메소드의 구현도 문법적으로 강제하지 않아 실수 가능성도 높다. 이를 막기위한 추가적인 보일러 플레이트도 따라온다. 때문에 생성자나 팩토리 메소드를 clone의 대용으로 사용하는데, 이는 컬렉션을 복사해야 할 때 더 큰 문제다. 일일이 복사 해줘야 하기 때문에 복잡도가 많이 올라간다. 이런 불편함 때문에 매퍼 라이브러리도 있지만 계층 구조가 복잡해지면 여전히 힘들어진다. 비슷한 상황이 발생하면 항상 하게 되는 고민인것 같다.</li>\n</ul>\n<h2 id=\"내일-할-일\" style=\"position:relative;\"><a href=\"#%EB%82%B4%EC%9D%BC-%ED%95%A0-%EC%9D%BC\" aria-label=\"내일 할 일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>내일 할 일</h2>\n<ul>\n<li>미션5 제출</li>\n<li>미션6 시작</li>\n</ul>","excerpt":"배열이 0부터인 이유는 C에서 부터 내려온 전통이기 때문이다. 더 자세하게 얘기하면, C의 배열은 주소 연산을 하여 위치를 찾는 것의 syntatic sugar로 인덱스 접근(a1과 같은)을 제공하기 때문에 매우 원시적이고, 따라서…","timeToRead":1,"fields":{"slug":"/blog/2021-02-23--til-20210222/"},"frontmatter":{"tags":["til"],"author":{"id":"정대화","bio":"DaeHwa_Jeong@outlook.com"},"title":"TIL-20210222","updatedDate":"2021. 02. 23.","createdDate":"2021. 02. 23."}},"recents":{"edges":[{"node":{"fields":{"slug":"/blog/2021-03-02--til-20210301/"},"timeToRead":1,"frontmatter":{"tags":["til"],"title":"TIL-20210301","author":{"id":"정대화"}}}},{"node":{"fields":{"slug":"/blog/2021-02-28--til-20210228/"},"timeToRead":1,"frontmatter":{"tags":["til"],"title":"TIL-20210228","author":{"id":"정대화"}}}},{"node":{"fields":{"slug":"/blog/2021-02-28--플로이드-와샬-알고리즘-floyd-warshall-algorithm/"},"timeToRead":5,"frontmatter":{"tags":["알고리즘"],"title":"플로이드 와샬 알고리즘(Floyd Warshall Algorithm)","author":{"id":"정대화"}}}},{"node":{"fields":{"slug":"/blog/2021-02-27--til-20210227/"},"timeToRead":1,"frontmatter":{"tags":["til"],"title":"TIL-20210227","author":{"id":"정대화"}}}}]}},"pageContext":{"slug":"/blog/2021-02-23--til-20210222/","dateFormat":"YYYY. MM. DD."}},"staticQueryHashes":[]}