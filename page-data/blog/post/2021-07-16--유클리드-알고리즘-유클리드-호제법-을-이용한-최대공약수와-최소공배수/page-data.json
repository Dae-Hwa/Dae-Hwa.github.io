{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/post/2021-07-16--유클리드-알고리즘-유클리드-호제법-을-이용한-최대공약수와-최소공배수/","result":{"data":{"site":{"siteMetadata":{"disqus":"gatsby-typescript"}},"post":{"html":"<h2 id=\"최대공약수greatest-common-divisor-gcd\" style=\"position:relative;\"><a href=\"#%EC%B5%9C%EB%8C%80%EA%B3%B5%EC%95%BD%EC%88%98greatest-common-divisor-gcd\" aria-label=\"최대공약수greatest common divisor gcd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최대공약수(Greatest Common Divisor; GCD)</h2>\n<p>공약수는 두 개 이상의 자연수의 약수 중 공통된 수다. 최대공약수는 공약수 중 가장 큰 수를 말한다.</p>\n<blockquote>\n<p>두 수의 최대공약수가 1이면 서로소(coprime; relatively prime)이라 한다.</p>\n</blockquote>\n<p>최대공약수를 구하는 가장 쉬운 방법은 두 수의 공약수 중 가장 큰 것을 선택하는 것이다. 예를 들어, 8과 12의 최대공약수를 구한다면, 각 수의 약수는 다음과 같다.</p>\n<ul>\n<li>8 : 1, 2, 4, 8</li>\n<li>12 : 1, 2, 3, 4, 6, 12</li>\n</ul>\n<p>두 수의 공약수는 1, 2, 4 이다. 이중 가장 큰 수는 4이므로 4가 최대공약수다.</p>\n<p>혹은 소인수 분해(prime factorial)의 결과의 차수 중 작은 것을 선택한 뒤 곱한다. 예를 들어 8의 소인수 분해 결과인 2³과 12의 소인수 분해 결과인 2² <em>3¹에서 작은 차수를 선택하면 2²</em> 3⁰ 이 된다. 따라서 최대공약수는 4가 된다.</p>\n<h2 id=\"유클리드-알고리즘euclidean-algorithm-유클리드-호제법\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%ED%81%B4%EB%A6%AC%EB%93%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98euclidean-algorithm-%EC%9C%A0%ED%81%B4%EB%A6%AC%EB%93%9C-%ED%98%B8%EC%A0%9C%EB%B2%95\" aria-label=\"유클리드 알고리즘euclidean algorithm 유클리드 호제법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유클리드 알고리즘(Euclidean algorithm; 유클리드 호제법)</h2>\n<p>위의 방법들은 간단하게 생각하여 구할 수 있지만, 코드로 구현하면 계산이 많아진다는 문제점이 있다. 따라서 유클리드 알고리즘이 많이 쓰인다. 유클리드 알고리즘은 두 가지 사실을 바탕으로 만들어졌다.</p>\n<ol>\n<li><code class=\"language-text\">b|a</code>(b가 a의 인수나 약수이고, a가 b의 배수) 이면 <code class=\"language-text\">gcd(a, b) = b</code> 이다.</li>\n<li><code class=\"language-text\">a = bt + r</code> 을 만족하는 정수 <code class=\"language-text\">t</code>와  <code class=\"language-text\">r</code>이 있으면 <code class=\"language-text\">gcd(a, b) = gcd(b, r)</code> 이다.</li>\n</ol>\n<p>우선 첫째로, a가 b의 배수라는 것은 a가 b로 나누어떨어진다는 것이다. 이 경우 <code class=\"language-text\">a = bk</code>를 만족하는 정수 <code class=\"language-text\">k</code> 가 존재한다. <code class=\"language-text\">bk</code>와 <code class=\"language-text\">b</code>의 최대공약수는 b이다. 즉, <code class=\"language-text\">gcd(bk, b) = b</code> 이기 때문에 1번이 성립한다.</p>\n<p>2번 명제는 <code class=\"language-text\">gcd(a, b) = gcd(bt+r, b) = gcd(b, r)</code>로 정리해볼 수 있다. <code class=\"language-text\">bt</code>는<code class=\"language-text\">b</code>로 나누어떨어질 것이기 때문에 <code class=\"language-text\">b</code>의 모든 약수로 나눌 수 있다. 따라서 <code class=\"language-text\">a</code>와 <code class=\"language-text\">b</code>의 공약수는 <code class=\"language-text\">r</code>에 의해서 결정된다. 즉, a가 b로 나누어떨어지고, 나머지가 r일 경우 <code class=\"language-text\">gcd(b, r)</code>이 되는 것이다.</p>\n<p>유클리드 알고리즘은 재귀적이다. 둘 중 큰 정수를 작은 정수로 나눈 나머지와 작은 정수의 최대 공약수를 구하는 것을 반복하기 때문이다. 다시 8과 12의 최대공약수를 구해보면 다음과 같은 과정을 거친다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">gcd(8, 12) &amp;=&amp; gcd(8, 12 % 8) = gcd(8, 4)\ngcd(8, 4) &amp;=&amp; gcd(8 % 4, 4) = gcd(4, 0)</code></pre></div>\n<p>따라서 <code class=\"language-text\">gcd(8, 12) = 4</code> 다.</p>\n<h2 id=\"최소공배수least-common-multiple-lcm\" style=\"position:relative;\"><a href=\"#%EC%B5%9C%EC%86%8C%EA%B3%B5%EB%B0%B0%EC%88%98least-common-multiple-lcm\" aria-label=\"최소공배수least common multiple lcm permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최소공배수(Least Common Multiple; LCM)</h2>\n<p>공배수는 두 개 이상의 자연수의 공통된 배수이며, 최소공배수는 공배수 중 가장 작은 것이다. 8과 12의 공배수를 찾아보기 위해 각각의 배수를 나열해보면 다음과 같다.</p>\n<ul>\n<li>8 : 8, 16, 24, 32, 40, <strong>48</strong>, 56, 64, 72, 80, 88, <strong>96</strong>, 104 ...</li>\n<li>12 : 12, 24, 36, <strong>48</strong>, 60, 72, 84, <strong>96</strong>, 108 ...</li>\n</ul>\n<p>진하게 표시된 숫자가 공배수다. 그 중 최소공배수는 48이다.</p>\n<p>최소공배수는 서로 다른 주기로 일어나는 두 사건이 동시에 일어나는 주기를 찾는 것과 같은 경우에 사용된다. 예를 들어, 대통령 선거(5년 주기)와 국회의원 선거(4년 주기)를 함께 치르는 주기는 <code class=\"language-text\">lcm(5, 4) = 20</code>이기 때문에 20년마다 한 번씩 찾아온다.</p>\n<p>최소공배수는 최대공약수에서 살펴봤던 지수를 이용한 방법과 유사하게 구할 수 있지만, 최대공약수를 이용할 수도 있다. 최소공배수는 아래와 같은 성질을 가지고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">max(x, y) &lt;= lcm(x, y) &lt;= xy</code></pre></div>\n<p>최소공배수가 <code class=\"language-text\">xy</code>가 되는 상황은 최대공약수가 1이 되는 경우다. 이를 역으로 생각해보면 <code class=\"language-text\">lcm(x, y) * gcd(x, y) = xy</code>가 성립하는데, 이는 <code class=\"language-text\">lcm(x, y) = xy / gcd(x, y)</code>와 같이 정리할 수 있다.</p>\n<h2 id=\"구현\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%ED%98%84\" aria-label=\"구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구현</h2>\n<p>위에서 살펴봤던 대로 재귀적으로 mod 연산을 하여 <code class=\"language-text\">r</code>을 구해주며 진행하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> a <span class=\"token operator\">%</span> b<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">lcm</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> y <span class=\"token operator\">/</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>자바의 경우 <code class=\"language-text\">BigInteger</code> 클래스에 gcd가 구현돼있다. 다음과 같이 이용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>math<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BigInteger</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GcdUtil</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">GcdUtil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">BigInteger</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">.</span><span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BigInteger</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"https://mathbang.net/202\">수학방 - 최대공약수</a></li>\n<li><a href=\"https://www.hanbit.co.kr/media/books/book_view.html?p_code=B5937184860\">Programming Challenges: 알고리즘 트레이닝 북</a></li>\n</ul>","excerpt":"최대공약수(Greatest Common Divisor; GCD) 공약수는 두 개 이상의 자연수의 약수 중 공통된 수다. 최대공약수는 공약수 중 가장 큰 수를 말한다. 두 수의 최대공약수가 1이면 서로소(coprime; relatively prime…","timeToRead":4,"fields":{"slug":"/blog/post/2021-07-16--유클리드-알고리즘-유클리드-호제법-을-이용한-최대공약수와-최소공배수/"},"frontmatter":{"tags":["algorithm"],"author":{"id":"정대화","bio":"DaeHwa_Jeong@outlook.com"},"title":"유클리드 알고리즘(유클리드 호제법)을 이용한 최대공약수와 최소공배수","updatedDate":"2021. 07. 16.","createdDate":"2021. 07. 16."}},"recents":{"edges":[{"node":{"fields":{"slug":"/blog/til/2021-08-24--til-20210822-28/"},"timeToRead":2,"frontmatter":{"tags":["til"],"title":"TIL-20210822~28","author":{"id":"정대화"}}}},{"node":{"fields":{"slug":"/blog/post/2021-08-17--json-web-token-jwt/"},"timeToRead":9,"frontmatter":{"tags":["etc"],"title":"JWT(JSON Web Token)","author":{"id":"정대화"}}}},{"node":{"fields":{"slug":"/blog/til/2021-08-16--til-20210815-21/"},"timeToRead":6,"frontmatter":{"tags":["til"],"title":"TIL-20210815~21","author":{"id":"정대화"}}}},{"node":{"fields":{"slug":"/blog/post/2021-08-17--authentication-authorization의-차이/"},"timeToRead":1,"frontmatter":{"tags":["etc"],"title":"authentication, authorization의 차이","author":{"id":"정대화"}}}}]}},"pageContext":{"slug":"/blog/post/2021-07-16--유클리드-알고리즘-유클리드-호제법-을-이용한-최대공약수와-최소공배수/","dateFormat":"YYYY. MM. DD."}},"staticQueryHashes":[]}