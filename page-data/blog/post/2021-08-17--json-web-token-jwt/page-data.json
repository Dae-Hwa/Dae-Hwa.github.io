{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/post/2021-08-17--json-web-token-jwt/","result":{"data":{"site":{"siteMetadata":{"disqus":"gatsby-typescript"}},"post":{"html":"<p>JSON Web Tokens are an open, industry standard <a href=\"https://tools.ietf.org/html/rfc7519\">RFC 7519</a> method for representing claims securely between two parties.</p>\n<p>JWT는 두 당사자 간의 클레임(claim)을 안전하게 표현하기 위한 RFC 7519 메소드다</p>\n<p>JWT는 두 당사자(parties) 간 정보(claim)을 JSON 객체로 안전하게 전송하는 간결하고 독립적인 방법(self-contained way)이다. JWT는 <a href=\"https://tools.ietf.org/html/rfc7519\">RFC 7519</a> 표준을 따른다.</p>\n<p>이러한 정보는 디지털 서명때문에 검증되고 신뢰할 수 있다. 비밀 또는 RSA, HCDSA를 사용하는 공개/비밀 키 쌍을 사용할 수 있다.</p>\n<p>서명된 토큰은 그 안에 포함된 claim의 무결성을 검증할 수 있다. 또한, 암호화된 토큰은 claim을 다른 사용자들(parties)에게 숨길 수 있다. 이러한 서명은 공개/비밀 키 쌍을 이용하고, 비밀키를 가진 사용자만 서명(sign in)했다고 증명한다.</p>\n<h2 id=\"언제-써야하나\" style=\"position:relative;\"><a href=\"#%EC%96%B8%EC%A0%9C-%EC%8D%A8%EC%95%BC%ED%95%98%EB%82%98\" aria-label=\"언제 써야하나 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>언제 써야하나?</h2>\n<ul>\n<li>\n<p>권한 확인(Authorization)</p>\n<ul>\n<li>가장 많이 쓰는 시나리오. 사용자가 로그인하면 다음 요청부터는 JWT를 포함한다. 사용자는 해당 토큰으로 허용되는 경로, 서비스, 자원에 접근할 수 있다.</li>\n<li>오버헤드가 적고 여러 도메인에서 쉽게 사용할 수 있기 때문에 SSO(Single Sign On)에 JWT가 널리 사용된다.</li>\n</ul>\n<blockquote>\n<p>다른 방법으로 SAML이 있다.</p>\n</blockquote>\n</li>\n<li>\n<p>정보 교환</p>\n<ul>\n<li>JWT는 공개/비밀 키와 같은 방법으로 서명될 수 있다. 받는 사람은 JWT에 있는 보낸 사람이 실제 전송자인 것을 믿을 수 있다. 추가적으로 서명은 헤더와 페이로드를 사용하여 계산되기 때문에 컨텐츠가 변조되지 않았는지 확인할 수 있다.</li>\n</ul>\n<blockquote>\n<p>구조설명 이후에 나와야 좋을듯</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"구조\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%A1%B0\" aria-label=\"구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구조</h2>\n<p><code class=\"language-text\">.</code>으로 구분 된 세 부분으로 구성된다.</p>\n<p><code class=\"language-text\">Header.Payload.Signature</code></p>\n<h3 id=\"header\" style=\"position:relative;\"><a href=\"#header\" aria-label=\"header permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Header</h3>\n<p>헤더는 보통 두 부분으로 구성된다. 각각 서명 알고리즘 <code class=\"language-text\">alg</code>와 토큰의 타입 <code class=\"language-text\">typ</code>다. 토큰의 타입은 일반적으로 <code class=\"language-text\">JWT</code>다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"alg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"HS256\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"typ\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"JWT\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"payload\" style=\"position:relative;\"><a href=\"#payload\" aria-label=\"payload permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Payload</h3>\n<p>payload는 claim을 포함한다. claim은 entity(보통 사용자) 및 추가적인 데이터에 관한 설명이다. claim에는 세 가지 종류가 있다.</p>\n<ul>\n<li>\n<p>Registered claims</p>\n<ul>\n<li>미리 정의된 클레임 집합</li>\n<li>필수 항목은 아니지만 유용하고 상호 유용한 클레임  집합을 위해 권장</li>\n<li>iss(발급자), exp(만료 시간), sub(주제), aud(청중) 등이 있다.</li>\n</ul>\n</li>\n<li>\n<p>Public claims</p>\n<ul>\n<li>사용자가 마음대로 정의할 수 있음</li>\n<li>충돌 방지를 위해 <a href=\"https://www.iana.org/assignments/jwt/jwt.xhtml\">IANA JSON Web Token Registry</a> 에 정의할 수 있음</li>\n<li>혹은 충돌이 일어나지 않는 네임스페이스를 포함하는 URI를 정의해야함</li>\n</ul>\n</li>\n<li>\n<p>private claims</p>\n<ul>\n<li>parties 간 정보를 교환하기로 동의하여 만들어진 커스텀 claims 중 registered나 public이 아닌 클레임</li>\n</ul>\n</li>\n</ul>\n<p>이러한 페이로드는 Base64Url로 인코딩 된다.</p>\n<h3 id=\"signature\" style=\"position:relative;\"><a href=\"#signature\" aria-label=\"signature permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Signature</h3>\n<p>시그니처 파트를 만드려면 인코딩된 헤더, 인코딩된 페이로드, 시크릿 키, 헤더에 지정된 알고리즘으로 서명해야 한다. 예를 들어, HMAC SHA256 알고리즘을 사용하려면 시그니처는 다음과 같이 만들어진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token constant\">HMACSHA256</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">base64UrlEncode</span><span class=\"token punctuation\">(</span>header<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".\"</span> <span class=\"token operator\">+</span>\n  <span class=\"token function\">base64UrlEncode</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  secret<span class=\"token punctuation\">)</span></code></pre></div>\n<p>시그니처는 메세지 변조가 일어나지 않았는지 확인하는데 사용된다. 개인 키로 서명된 토큰의 경우 JWT의 sender가 누군지 검증할 수 있다.</p>\n<h3 id=\"합치기putting-all-together\" style=\"position:relative;\"><a href=\"#%ED%95%A9%EC%B9%98%EA%B8%B0putting-all-together\" aria-label=\"합치기putting all together permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>합치기(Putting all together)</h3>\n<p>결과(output)는 <code class=\"language-text\">.</code>으로 나누어진 세개의 Base64-URL String이다. 이는 HTML과 HTTP 환경에서 쉽게 전달할 수 있다. XML기반 표준인 SAML보다 더 간결하다. <a href=\"https://jwt.io/#debugger-io\">https://jwt.io/#debugger-io</a> 에서 인코딩과 디코딩 결과를 볼 수 있다.</p>\n<h2 id=\"동작-원리how-do-json-web-tokens-work\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%9E%91-%EC%9B%90%EB%A6%AChow-do-json-web-tokens-work\" aria-label=\"동작 원리how do json web tokens work permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동작 원리(How do JSON Web Tokens work)</h2>\n<p>authentication시, 사용자가 자신의 credential로 성공적으로 로그인하면 JWT가 반환된다.  토큰은 credential이므로 보안 이슈를 예방하기 위해 주의해야 한다. 일반적으로 토큰을 필요 이상으로 오래 가지고 있으면 안 된다. 또한 민감한 세션 데이터를 브라우저 스토리지에 저장하면 안 된다. 보안이 취약하기 때문이다.</p>\n<blockquote>\n<p><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/HTML5_Security_Cheat_Sheet.html#storage-apis\">HTML5 Security - Storage APIs</a>에 따르면 authentication이 가능한 정보는 피하는 것이 좋다고 한다. <!-- html 문서 찾아보기 --></p>\n</blockquote>\n<hr>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"https://jwt.io/introduction\">https://jwt.io/introduction</a></li>\n</ul>","excerpt":"JSON Web Tokens are an open, industry standard RFC 7519 method for representing claims securely between two parties. JWT는 두 당사자 간의 클레임(claim…","timeToRead":3,"fields":{"slug":"/blog/post/2021-08-17--json-web-token-jwt/"},"frontmatter":{"tags":["etc"],"author":{"id":"정대화","bio":"DaeHwa_Jeong@outlook.com"},"title":"JSON Web Token(JWT)","updatedDate":"2021. 08. 17.","createdDate":"2021. 08. 17."}},"recents":{"edges":[{"node":{"fields":{"slug":"/blog/post/2021-08-17--authentication-authorization의-차이/"},"timeToRead":1,"frontmatter":{"tags":["etc"],"title":"authentication, authorization의 차이","author":{"id":"정대화"}}}},{"node":{"fields":{"slug":"/blog/til/2021-08-16--til-20210815-21/"},"timeToRead":6,"frontmatter":{"tags":["til"],"title":"TIL-20210815~21","author":{"id":"정대화"}}}},{"node":{"fields":{"slug":"/blog/til/2021-08-09--til-20210808-14/"},"timeToRead":6,"frontmatter":{"tags":["til"],"title":"TIL-20210808~14","author":{"id":"정대화"}}}},{"node":{"fields":{"slug":"/blog/til/2021-08-09--til-20210801-07/"},"timeToRead":3,"frontmatter":{"tags":["til"],"title":"TIL-20210801~07","author":{"id":"정대화"}}}}]}},"pageContext":{"slug":"/blog/post/2021-08-17--json-web-token-jwt/","dateFormat":"YYYY. MM. DD."}},"staticQueryHashes":[]}