{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/til/2021-04-23--til-20210422-23/","result":{"data":{"site":{"siteMetadata":{"disqus":"gatsby-typescript"}},"post":{"html":"<ul>\n<li>\n<p>리팩토링을 진행하며 제네릭을 사용했다. 제네릭 메소드에서 생각하지 못해봤던 동작이 발생했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">somethingReturnList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>컴파일은 문제없이 되고, 실행도 잘 된다. 문제는 E의 타입이 정확하지 않아도 된다는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> test1 <span class=\"token operator\">=</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> test2 <span class=\"token operator\">=</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>둘 다 가능하다. 예상으로는 제네릭 타입이 명시되지 않았기 때문에 Object로 추론한게 아닌가 하는 생각이다.</p>\n</li>\n<li>\n<p>예외에 관해서 브라이언이 발표를 해주셨다. 간단히 얘기하면 절대로 일어나지 말아야 하는 것이 예외 상황이라는 것이다. 도메인 내부에서 예외를 잘 사용하면 헷갈리는 일이 많이 없어질 것이라는 것. 즉 설계의 문제라는 것이다.</p>\n<p>이외에 상속을 잘 이용하면 계층을 구성할 수도 있다는 것. 나름의 정리를 좀 해봐야겠다.</p>\n</li>\n<li>executable jar에서 파일을 불러오면 <code class=\"language-text\">jar:file:</code>로 url이 세팅된다. 그래서 그런건지 파일이 없는 것으로 나온다. 아마 url의 프로토콜이 file이 아닌 것으로 판단된 것이 아닌가 싶다. war로 배포할때는 이런 일이 없다고 한다.</li>\n</ul>","excerpt":"리팩토링을 진행하며 제네릭을 사용했다. 제네릭 메소드에서 생각하지 못해봤던 동작이 발생했다. 컴파일은 문제없이 되고, 실행도 잘 된다. 문제는 E…","timeToRead":1,"fields":{"slug":"/blog/til/2021-04-23--til-20210422-23/"},"frontmatter":{"tags":["til"],"author":{"id":"정대화","bio":"DaeHwa_Jeong@outlook.com"},"title":"TIL-20210422~23","updatedDate":"2021. 04. 23.","createdDate":"2021. 04. 23."}},"recents":{"edges":[{"node":{"fields":{"slug":"/blog/til/2021-10-12--til-20211010-16/"},"timeToRead":4,"frontmatter":{"tags":["til"],"title":"TIL-20211010~16","author":{"id":"정대화"}}}},{"node":{"fields":{"slug":"/blog/til/2021-09-28--til-20210926-1002/"},"timeToRead":5,"frontmatter":{"tags":["til"],"title":"TIL-20210926~1009","author":{"id":"정대화"}}}},{"node":{"fields":{"slug":"/blog/til/2021-09-20--til-20210919-25/"},"timeToRead":3,"frontmatter":{"tags":["til"],"title":"TIL-20210919~25","author":{"id":"정대화"}}}},{"node":{"fields":{"slug":"/blog/til/2021-09-15--til-20210912-18/"},"timeToRead":5,"frontmatter":{"tags":["til"],"title":"TIL-20210912~18","author":{"id":"정대화"}}}}]}},"pageContext":{"slug":"/blog/til/2021-04-23--til-20210422-23/","dateFormat":"YYYY. MM. DD."}},"staticQueryHashes":[]}