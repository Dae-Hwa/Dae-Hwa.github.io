{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/til/2021-01-20--til-20210120/","result":{"data":{"site":{"siteMetadata":{"disqus":"gatsby-typescript"}},"post":{"html":"<ul>\n<li>오늘 엄청나게 늦잠을 자버렸다. 우려하던것이 일어난 듯 하다. 그래도 다행히 알고리즘 데이여서 큰 피해는 없었다. 더욱 다행히 문제도 다 쉬운 것들이여서 금방 해결 할 수 있었다.</li>\n<li>오후에는 밀린 잠을 마저 자버렸다. 푹 쉰 느낌이다. 아마 1월 말까지는 계속 비슷한 패턴으로 흘러갈 것 같은데 걱정이다. 욕심을 조금 내려놓아야 할 것 같다.</li>\n<li>네트워크 강의를 들었다 아직 초반부여서 크게 무리는 없는데 일찍 일어나 부지런히 들어야 겠다. 스케줄을 보니 이번 주에 끝내도록 되어있다.</li>\n<li>\n<p>남는 시간에 pass by value 매커니즘을 좀 살펴봤다. 원리는 생각보다 간단한듯하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// #1</span>\n      <span class=\"token class-name\">A</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// #2</span>\n      <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">A</span> parameter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// #3</span>\n    parameter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>#1 에서 변수 a에 인스턴스가 할당된다.</li>\n<li>#2 에서 메소드의 argument로 a가 넘어간다. 이 때, 메소드의 로컬 변수에 참조가 복사된다(shallow copy).</li>\n<li>복사된다는것은 다음과 같다. <code class=\"language-text\">parameter = a</code></li>\n<li>\n<p>따라서 #3 에서 parameter의 참조가 변해도 a는 그대로다.</p>\n<blockquote>\n<p>물론 parameter를 리턴한다면 예상하는 결과가 나올 것이다.</p>\n</blockquote>\n</li>\n</ul>\n<p>이거 해보려고 별 짓 다해봤는데 원리는 참 간단했다. 디컴파일 시켜봐도 로컬 변수가 새로 생성되어있는데 이 점을 간과하고 있었던 것 같다.</p>\n<p>가장 큰 착각은 값이 복사가 된다고해서 객체가 복사될 것이라 착각했던 것이다. 하지만 객체는 복사되지 않는다. 실제로 인스턴스 주소를 찍어보면 같은 주소가 나온다. 해쉬값도 똑같다.</p>\n<p>call by sharing이라는 말을 이래서 사용하는 것 같다. deep copy가 아니라서 call by value만으로 설명하기에는 직관적이지 않다고 느껴진다.</p>\n</li>\n</ul>\n<h2 id=\"아쉬운-점\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%89%AC%EC%9A%B4-%EC%A0%90\" aria-label=\"아쉬운 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아쉬운 점</h2>\n<ul>\n<li>OS 공부를 안했다. 내일은 미션을 좀 미루고서라도 조금씩 해봐야 할 것 같다. 내일은 전체적인 퀄리티는 좀 낮추고 미션 내용에 집중해보려고 한다. 잘 될지는 모르겠다.🤔</li>\n</ul>","excerpt":"오늘 엄청나게 늦잠을 자버렸다. 우려하던것이 일어난 듯 하다. 그래도 다행히 알고리즘 데이여서 큰 피해는 없었다. 더욱 다행히 문제도 다 쉬운 것들이여서 금방 해결 할 수 있었다. 오후에는 밀린 잠을 마저 자버렸다. 푹 쉰 느낌이다. 아마…","timeToRead":1,"fields":{"slug":"/blog/til/2021-01-20--til-20210120/"},"frontmatter":{"tags":["til"],"author":{"id":"정대화","bio":"DaeHwa_Jeong@outlook.com"},"title":"TIL-20210120","updatedDate":"2021. 01. 20.","createdDate":"2021. 01. 20."}},"recents":{"edges":[{"node":{"fields":{"slug":"/blog/post/2021-08-17--json-web-token-jwt/"},"timeToRead":9,"frontmatter":{"tags":["etc"],"title":"JWT(JSON Web Token)","author":{"id":"정대화"}}}},{"node":{"fields":{"slug":"/blog/til/2021-08-16--til-20210815-21/"},"timeToRead":6,"frontmatter":{"tags":["til"],"title":"TIL-20210815~21","author":{"id":"정대화"}}}},{"node":{"fields":{"slug":"/blog/post/2021-08-17--authentication-authorization의-차이/"},"timeToRead":1,"frontmatter":{"tags":["etc"],"title":"authentication, authorization의 차이","author":{"id":"정대화"}}}},{"node":{"fields":{"slug":"/blog/til/2021-08-09--til-20210808-14/"},"timeToRead":6,"frontmatter":{"tags":["til"],"title":"TIL-20210808~14","author":{"id":"정대화"}}}}]}},"pageContext":{"slug":"/blog/til/2021-01-20--til-20210120/","dateFormat":"YYYY. MM. DD."}},"staticQueryHashes":[]}