{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/til/2021-01-30--til-20210129/","result":{"data":{"site":{"siteMetadata":{"disqus":"gatsby-typescript"}},"post":{"html":"<ul>\n<li>호눅스가 DB를 만들어나가는 논리적인 과정을 보여줬는데 아주 인상 깊었다. 내가 구현할 수 있는 범위 내에서 고민하다가 나온 결과가 실제와 어떻게 다르고 어떻게 쓰이고 있는지 비교해주는 식으로 진행되었는데, 클론 구현을 하게 되면 저런 식으로 점검해나가야 할 것 같다. 인상 깊었다.</li>\n<li>리뷰를 하며 파이로가 cgroups를 보여줬다. 모든 것을 파일로 생각하고 관리하는 리눅스의 정책이 이럴 때 빛을 발하는 것 같다. os학습에 왜 리눅스가 쓰이는지 다시 한 번 느꼈다.</li>\n<li>\n<p>어제 도커를 올리는 데까지 성공했기 때문에 스크립트를 짰다. 어제 했던 고민은 호눅스가 수업시간에 말해준 것들로 모두 해결이 됐다. 도커로 파일을 복사할 수 있으면 더 이상 설계할 것은 없는 것 같아 바로 진행했다.</p>\n<p>웬만하면 스크립트로 진행해보고 싶어 파워쉘 스크립트로 만들어봤는데, 생각보다 지원되는 기능들이 많아 놀랬다. 하지만 100만 번의 루프를 난수를 생성하며 돌리니 너무 느렸기에 멀티 스레드를 고려해봤는데, 구현이 난해하고 이해가 잘되지 않았다. 어느 부분에서 프로그램이 멈추는데 디버깅도 잘되지 않았다. 시간이 많이 지체되어 써본 것에 의의를 두고, 빌드 스크립트를 쉽게 작성할 수 있는 js로 바꾸어 시작했다. 문법만 바꿔서 옮긴 것이라 크게 어렵진 않았는데, js는 병렬 프로그래밍을 <code class=\"language-text\">Promise</code> 객체를 이용하여 돌리는 것이 신기했다. 엄청 편했다.</p>\n<p>npm으로 만든 파일과 쉘 명령어를 묶었다. 파워쉘에서 <code class=\"language-text\">echo</code> 같은 기본적인 명령어는 alias 처리를 해놔서 배쉬에서도 실행 가능한 스크립트가 만들어졌다. 인자를 받고 싶어 찾아보다 알아낸 사실인데, node의 패키지 중에 프로세스 생성 같은 시스템 콜 api도 있었다. 실행파일로 빌드할 수도 있었는데, 살짝 충격을 받았다.</p>\n<p>다 만들고 jdbc로 도커에 접속해보려는데, 잘되지 않았다. nat방식이기 때문에 포워딩을 해줘야 한다고 하는데 기존 컨테이너의 포트를 변경하는 기능은 제공하지 않는다고 한다. 네트워크를 따로 만들면 된다는데, 일단 이미지 커밋이 어떤 방식인지 궁금해 커밋을 하고 다시 컨테이너를 띄우는 방식으로 진행했다. 왜 그런지 모르겠는데, 세팅은 그대로지만 db가 다 날아갔다. 좀 찾아보고 질문을 해봐야 할 것 같다. 아무튼, 목표인 jdbc 연결까지는 완료했는데 중간에 시간이 지체되어 compose까지 살펴보지는 못했다. 그래도 이것저것 새롭게 해본 것이 많아 크게 손해 본 느낌은 아니다. compose는 여유가 생기면 먼저 찾아봐야 할 것 같다.</p>\n</li>\n<li>벌써 한 주가 가버렸다. 이번 주는 어려운 주제들이었는데 팀원들 덕을 많이 본 것 같다. 이번 주말만 지나면 전공자 따라잡기가 끝난다. 블로그도 만든 김에 끝나고 나면 후기를 작성해봐야 할 것 같은데 공부의 방향이 나름 잡힌 것 같긴 하다. 어쨌든 남은 주말만 잘 보내보자.</li>\n</ul>\n<h2 id=\"아쉬운-점\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%89%AC%EC%9A%B4-%EC%A0%90\" aria-label=\"아쉬운 점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아쉬운 점</h2>\n<ul>\n<li>시간 분배를 잘하진 못한 것 같다. 인강을 하나도 안 들었는데, 이번 주 데브독스는 회의만 하기로 해서 그런 것도 있지만 그래도 인강을 몰아 들을 생각하니 벌써 진이 빠진다... 이번 과제가 너무 재미있어 어쩔 수 없었던 것 같기도 하다😭.</li>\n</ul>","excerpt":"호눅스가 DB…","timeToRead":2,"fields":{"slug":"/blog/til/2021-01-30--til-20210129/"},"frontmatter":{"tags":["til"],"author":{"id":"정대화","bio":"DaeHwa_Jeong@outlook.com"},"title":"TIL-20210129","updatedDate":"2021. 01. 30.","createdDate":"2021. 01. 30."}},"recents":{"edges":[{"node":{"fields":{"slug":"/blog/post/2021-07-16--유클리드-알고리즘-유클리드-호제법-을-이용한-최대공약수와-최소공배수/"},"timeToRead":4,"frontmatter":{"tags":["algorithm"],"title":"유클리드 알고리즘(유클리드 호제법)을 이용한 최대공약수와 최소공배수","author":{"id":"정대화"}}}},{"node":{"fields":{"slug":"/blog/til/2021-07-15--til-20210711-17/"},"timeToRead":4,"frontmatter":{"tags":["til"],"title":"TIL-20210711~17","author":{"id":"정대화"}}}},{"node":{"fields":{"slug":"/blog/til/2021-07-06--til-20210704-10/"},"timeToRead":8,"frontmatter":{"tags":["til"],"title":"TIL-20210704~10","author":{"id":"정대화"}}}},{"node":{"fields":{"slug":"/blog/til/2021-06-28--til-20210627-0703/"},"timeToRead":9,"frontmatter":{"tags":["til"],"title":"TIL-20210627~0703","author":{"id":"정대화"}}}}]}},"pageContext":{"slug":"/blog/til/2021-01-30--til-20210129/","dateFormat":"YYYY. MM. DD."}},"staticQueryHashes":[]}