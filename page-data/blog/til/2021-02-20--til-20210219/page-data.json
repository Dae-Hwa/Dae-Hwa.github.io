{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/til/2021-02-20--til-20210219/","result":{"data":{"site":{"siteMetadata":{"disqus":"gatsby-typescript"}},"post":{"html":"<ul>\n<li>미션4는 걱정과 달리 바로 머지됐다. 그런데 미션5가 꽤나 까다롭다. row와 column을 반전시켜서 생각해야하는데, 쉽게 해결하려면 기물 안에 위치를 넣어주면 될 것 같았다. 하지만, 그렇게하면 기물은 VO로 설계되었기 때문에 계속해서 객체를 재생성해야 한다는 점, 그리고 옮기는 작업을 할 때 마다 해당 위치를 넣어줘야 한다는 점이 마음에 들지 않았다. 그래서 일단 구현 먼저 해놓고 생각하려고 90도 돌려버렸다. 작동은 잘 되는데, 리팩토링이 필요하다.</li>\n<li>primitive obsession 이라는 키워드를 봤다. code smell 중의 하나인 것 같은데, 시간 나면 한 번 읽어봐야겠다.</li>\n<li>foot print가 용량을 뜻한다고 한다. memory footprint와 같이 사용된다.</li>\n<li>가비지 컬렉터를 잠깐 살펴봤다. 기본 동작 원리는 기본 연결 여부 플래그를 false로 해놓은 뒤, dfs로 연결된 객체를 탐색하여 플래그를 true로 변경한다. 이후 연결 되지 않은 객체를 삭제한다. 그런데 G1 가비지 컬렉터가 잘 이해되지 않는다. 내일 다시 봐야겠다.</li>\n</ul>","excerpt":"미션4는 걱정과 달리 바로 머지됐다. 그런데 미션5가 꽤나 까다롭다. row와 column을 반전시켜서 생각해야하는데, 쉽게 해결하려면 기물 안에 위치를 넣어주면 될 것 같았다. 하지만, 그렇게하면 기물은 VO…","timeToRead":1,"fields":{"slug":"/blog/til/2021-02-20--til-20210219/"},"frontmatter":{"tags":["til"],"author":{"id":"정대화","bio":"DaeHwa_Jeong@outlook.com"},"title":"TIL-20210219","updatedDate":"2021. 02. 20.","createdDate":"2021. 02. 20."}},"recents":{"edges":[{"node":{"fields":{"slug":"/blog/til/2021-07-19--til-20210718-24/"},"timeToRead":2,"frontmatter":{"tags":["til"],"title":"TIL-20210718~24","author":{"id":"정대화"}}}},{"node":{"fields":{"slug":"/blog/post/2021-07-16--유클리드-알고리즘-유클리드-호제법-을-이용한-최대공약수와-최소공배수/"},"timeToRead":4,"frontmatter":{"tags":["algorithm"],"title":"유클리드 알고리즘(유클리드 호제법)을 이용한 최대공약수와 최소공배수","author":{"id":"정대화"}}}},{"node":{"fields":{"slug":"/blog/til/2021-07-15--til-20210711-17/"},"timeToRead":4,"frontmatter":{"tags":["til"],"title":"TIL-20210711~17","author":{"id":"정대화"}}}},{"node":{"fields":{"slug":"/blog/til/2021-07-06--til-20210704-10/"},"timeToRead":8,"frontmatter":{"tags":["til"],"title":"TIL-20210704~10","author":{"id":"정대화"}}}}]}},"pageContext":{"slug":"/blog/til/2021-02-20--til-20210219/","dateFormat":"YYYY. MM. DD."}},"staticQueryHashes":[]}